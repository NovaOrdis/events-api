/*
 * Copyright (c) 2017 Nova Ordis LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.novaordis.events.api.metric.os;

import io.novaordis.events.api.event.Property;
import io.novaordis.events.api.metric.MetricDefinition;

/**
 * Represents the definition of a metric whose values can be obtained by executing an external O/S command on an
 * OSSource metric source and parsing the stdout of the command execution. These definitions are associated with
 * metrics that can be collected from LocalOS, RemoteOS, etc.
 *
 * @see OSSource
 * @see LocalOS
 * @see RemoteOS
 *
 * @author Ovidiu Feodorov <ovidiu@novaordis.com>
 * @since 6/5/17
 */
public interface OSMetricDefinition extends MetricDefinition {

    // Constants -------------------------------------------------------------------------------------------------------

    // Static ----------------------------------------------------------------------------------------------------------

    // Public ----------------------------------------------------------------------------------------------------------

    /**
     * @return the command to be executed to obtain the metric value, on the O/S the JVM executing the code runs on.
     * Usually the command's stdout has to be parsed to extract the individual metric value. The metric definition
     * implementation contains the parsing logic.
     *
     * @see OSMetricDefinition#parseCommandOutput(String)
     */
    String getCommand();

    /**
     * @param commandExecutionStdout the stdout generated by the execution of the command indicated by getCommand().
     *
     * @return the metric value extracted from the command stdout. If a value cannot be successfully extracted because
     * of invalid command output, the method must return null. No exception must be thrown in this case. The
     * implementation should also log as WARN more details on why collection failed.
     */
    Property parseCommandOutput(String commandExecutionStdout);


}
