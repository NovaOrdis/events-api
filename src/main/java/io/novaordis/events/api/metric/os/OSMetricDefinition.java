/*
 * Copyright (c) 2017 Nova Ordis LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.novaordis.events.api.metric.os;

import io.novaordis.events.api.event.Property;
import io.novaordis.events.api.metric.MetricDefinition;
import io.novaordis.utilities.os.OSType;
import io.novaordis.utilities.parsing.PreParsedContent;

import java.io.File;

/**
 * Represents the definition of a metric whose values can be obtained either by reading and parsing the content of
 * a file, or by executing an external OS command on the OSSourceBase metric source associated with this definition.
 * Once the file content is read, or the command is executed and its stdout is collected, the content so produced
 * must be passed to the appropriate parseFileContent()/parseCommandOutput() method, which possesses the knowledge
 * to extract the reading (property instance) from the content.
 *
 * The metric definition does not read the file internally, but delegate this task to the calling layer to optimize
 * reading: the file can be read only once this way, and the content be shared among multiple metric definitions,
 * instead of relying on each individual metric definition to perform identical I/O operations. This becomes important
 * when the file resides on a remote metric source, such as a RemoteOS. It is also important to read the file once,
 * if multiple metrics extract their readings from it, to insure the fact that the values are associated with just
 * one timestamp, and not read during successive operations.
 *
 * OSMetricDefinition works for metrics that can be collected from LocalOS and RemoteOS metric sources.
 *
 * The situation when a metric may be obtained from both a file and a command execution is valid. If this is the case,
 * the file should be preferred, for performance reasons, but ultimately is up to the calling layer to decide.
 *
 * @see OSSourceBase
 * @see LocalOS
 * @see RemoteOS
 *
 * @author Ovidiu Feodorov <ovidiu@novaordis.com>
 * @since 6/5/17
 */
public interface OSMetricDefinition extends MetricDefinition {

    // Constants -------------------------------------------------------------------------------------------------------

    // Static ----------------------------------------------------------------------------------------------------------

    // Public ----------------------------------------------------------------------------------------------------------

    /**
     * @param osType a valid OSType.
     *
     * @return a File instance that represents a file in the target's metric source filesystem. A null value means
     * that the metric cannot be read from a file.
     */
    File getSourceFile(OSType osType);

    /**
     * @param osType a valid OSType.
     *
     * @param sourceFileContent the content of the file designated by this metric as the source for readings, via
     *                          getSourceFile() command. Can be null, which means that the metric is not available
     *                          via this method on the target filesystem, In this case, the method must be prepared
     *                          this situation by manufacturing a null-value property.
     *
     * @param previousReading optional pre-parsed content of the previous reading.
     *
     * @return the metric value extracted from file content. If a value cannot be successfully extracted because of
     * invalid content, or because the content is null, the method must return a valid Property instance containing
     * a null value. The method must not throw an exception in this case. The implementation should also log as WARN
     * more details on why collection failed, in case of a non-null argument.
     */
    Property parseSourceFileContent(OSType osType, byte[] sourceFileContent, PreParsedContent previousReading);

    /**
     * @param osType a valid OSType.
     *
     * @return the command to be executed to obtain the metric value, on the OS corresponding to the given osType.
     * The stdout generated by the command has to be parsed to extract the individual metric value. The metric
     * definition implementation contains the parsing logic.
     *
     * If the metric is not available on the specified OS, or if it cannot be read via an external command, the method
     * will return null.
     *
     * @see OSMetricDefinition#parseCommandOutput(OSType, String, PreParsedContent)
     */
    String getCommand(OSType osType);

    /**
     * @param osType a valid OSType.
     *
     * @param previousReading optional pre-parsed content of the previous reading.
     *
     * @param commandExecutionStdout the stdout generated by the execution of the command indicated by getCommand().
     *                               It may be null in case the metric is not available on the target system, and the
     *                               method must be prepared to handle that, by manufacturing a null-value property.
     *
     * @return the metric value extracted from the command stdout, assumed to be produced by the command returned by
     * getCommand(). If a value cannot be successfully extracted because of invalid command output, or even if the
     * command output is null, the method must return a valid Property instance containing a null value. The method
     * must not throw an exception in this case. The implementation should also log as WARN more details on why
     * collection failed, in case of a non-null argument.
     */
    Property parseCommandOutput(OSType osType, String commandExecutionStdout, PreParsedContent previousReading);

}
